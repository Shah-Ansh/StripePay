syntax = "proto3";

package payment;

option go_package = "./proto";

// Payment Gateway Service
service PaymentGateway {
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Authenticate(AuthRequest) returns (AuthResponse);
  rpc TransferMoney(TransferRequest) returns (TransferResponse);
  rpc CheckBalance(BalanceRequest) returns (BalanceResponse);
  rpc BankRegister(BankRegisterRequest) returns (BankRegisterResponse);
}

message RegisterRequest {
  string username = 1;
  string password = 2;
  string account_id = 3;
  string bank_name = 4;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
}

message AuthRequest {
  string username = 1;
  string password = 2;
  string account_id = 3;
}

message AuthResponse {
  string token = 1;
  string message = 2;
}

message TransferRequest {
  string transaction_id = 1;
  string from_account = 2;
  string to_account = 3;
  double amount = 4;
  string from_bank = 5;
  string to_bank = 6;
}

message TransferResponse {
  bool success = 1;
  string message = 2;
}

message BalanceRequest {
  string account_id = 1;
  string bank_name = 2;
}

message BalanceResponse {
  double balance = 1;
  string message = 2;
}

// Bank Service
service Bank {
  rpc ProcessTransaction(TransactionRequest) returns (TransactionResponse);
  rpc GetBalance(BalanceRequest) returns (BalanceResponse);
  
  // Existing operations.
  rpc DebitAccount(DebitCreditRequest) returns (DebitCreditResponse);
  rpc CreditAccount(DebitCreditRequest) returns (DebitCreditResponse);
  
  // New 2PC RPCs.
  rpc PrepareDebit(DebitCreditRequest) returns (DebitCreditResponse);
  rpc CommitDebit(DebitCreditRequest) returns (DebitCreditResponse);
  rpc AbortDebit(DebitCreditRequest) returns (DebitCreditResponse);
  
  rpc PrepareCredit(DebitCreditRequest) returns (DebitCreditResponse);
  rpc CommitCredit(DebitCreditRequest) returns (DebitCreditResponse);
  rpc AbortCredit(DebitCreditRequest) returns (DebitCreditResponse);
}

message TransactionRequest {
  string transaction_id = 1;
  string from_account = 2;
  string to_account = 3;
  double amount = 4;
  string from_bank = 5;
  string to_bank = 6;
}

message TransactionResponse {
  bool success = 1;
  string message = 2;
}

message DebitCreditRequest {
  string account_id = 1;
  double amount = 2;
  string transaction_id = 3;
  // For debit, counterparty is receiver; for credit, counterparty is sender.
  string counterparty_account = 4;
}

message DebitCreditResponse {
  bool success = 1;
  string message = 2;
}

// New messages for Bank Registration.
message BankRegisterRequest {
  string bank_name = 1;
  string bank_address = 2;
}

message BankRegisterResponse {
  bool success = 1;
  string message = 2;
}
